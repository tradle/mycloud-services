service:
  name: tradle-mycloud-services

plugins:
  # - serverless-webpack
  # - serverless-dynamodb-local
  - serverless-offline
  - serverless-pseudo-parameters

provider:
  name: aws
  runtime: nodejs8.10
  region: ${self:custom.region}
  stage: dev
  vars: ${file(./lib/config/index.js):createConfigFromEnv}
  environment:
    MY_CLOUD_TABLE_NAME:
      Ref: MyCloudTableName
    S3_USER_LOGS_PREFIX:
      Ref: S3UserLogsPrefix
    S3_PATH_TO_PUSH_CONF:
      Ref: S3PushConfPath
    NOTIFY_LAMBDA_FUNCTION:
      Ref: NotifyLambdaFunction
    LOG_LEVEL: 'debug'
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:HeadObject
      Resource:
        - Ref: S3PushConfPath
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:BatchWriteItem
      Resource:
        - Fn::Join:
            - ''
            - - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/
              - Ref: MyCloudTableName
        - Fn::Join:
            - ''
            - - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/
              - Ref: MyCloudTableName
              - '/index/*'

  apiKeys:
    - privateServicesApiKey

custom:
  region: 'us-east-1'
  serverless-offline:
    port: 31013

functions:
  # PRIVATE API

  createPublisher:
    handler: lib/entrypoint/http/functions/root.handler
    events:
      - http:
          method: post
          path: publisher
          # requires api key to access
          private: true

  # createPublisher:
  #   handler: lib/entrypoint/sns/functions/register-publisher.handler
  #   events:
  #     - sns: register-publisher

  # PUBLISHER-PRIVATE API

  notify:
    handler: lib/entrypoint/http/functions/root.handler
    events:
      - http:
          method: post
          path: notification

  # PUBLIC API (for subscribers)

  createSubscriber:
    handler: lib/entrypoint/http/functions/root.handler
    events:
      - http:
          method: post
          path: subscriber

  createSubscription:
    handler: lib/entrypoint/http/functions/root.handler
    events:
      - http:
          method: post
          path: subscription

  clearBadge:
    handler: lib/entrypoint/http/functions/root.handler
    events:
      - http:
          method: post
          path: clearbadge

  saveUserLog:
    handler: lib/entrypoint/http/functions/root.handler
    events:
      - http:
          method: post
          path: userlog

resources:
  Parameters:
    S3PushConfPath:
      Type: String
      Default: ${self:custom.vars.s3PushConfPath}
    S3UserLogsPrefix:
      Type: String
      Default: ${self:custom.vars.s3UserLogsPrefix}
    MyCloudTableName:
      Type: String
      Default: ${self:custom.vars.myCloudTableName}
